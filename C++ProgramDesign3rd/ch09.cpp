#include <iostream>
#include "ch09.h"

using namespace std;

void ch09()
{
	// P283，Ch09，集合类和集合数据的组织
	//基本数据类型是C++编译系统预定义的，而自定义类型的数据是由多个基本类型或者自定义类型的元素组成的，称为集合数据。
	//对于集合数据，仅有系统预定义的操作是不够的，还需要设计与某些具体问题相关的特殊操作，并且按照面向对象的方法将数据与操作封装起来，称为集合类。
	//集合类分为两种：线性集合、非线性集合。
	//	线性集合中的元素按照位置排列有序。
	//	非线性集合中的元素不用位置顺序来标识元素。
	//集合数据两类常用的算法：排序和查找。
	//	排序（sorting）又称为分类或者整理，是将一个无序序列调整为有序的过程。排序方法：直接插入排序、直接选择排序、起泡排序方法
	//	查找（searching）是在一个序列中按照某种方式找出需要的特定数据元素的过程。查找方法 ：顺序查找、折半查找
	//9.1 函数模板与类模板
	//	参数化多态性，就是将程序所处理的对象的类型参数化，使得一段程序可以用于处理多种不同类型的对象
	//	9.1.1 函数模板
	//	9.1.2 类模板：用户可以为类声明一种模式，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值能够取得任意类型（包括系统预定义的和用户自定义的）
	//	类是对一组对象的公共性质的抽象，类模板是对不同类的公共性质的抽象，因此类模板属于更高层次的抽象。
	//	注：模板类的成员函数必须是函数模板。
	//9.2 线性集合
	//	9.2.1 线性集合的概念：在线性集合中，访问元素的方法包括（直接访问、顺序访问、索引访问）
	//		对可直接访问的线性集合，可以直接访问群体中的任何一个元素，而不必首先访问该元素之前的元素。
	//		对可顺序访问的线性集合，只能按照元素的排列顺序从头开始依次访问各个元素。
	//		栈是只能从一端访问的线性群体，可以访问的这一端称栈顶，另一端称栈底。
	//		对栈顶位置的标记称为栈顶指针，对栈底位置的标记称为栈底指针。
	//		向栈顶添加元素称为“压入栈”，删除栈顶元素称为“弹出栈”。
	//		栈中元素的添加和删除操作具有“后进先出”（LIFO）的特性。
	//		队列是只能向一端添加元素，从另一端删除元素的线性集合，可以添加元素的一端称为队尾，可以删除元素的一端称为队头。
	//		对队头位置的标记称为队头指针，对队尾位置的标记称为队尾指针。
	//		向队尾添加元素称为“入队”，删除队头元素称为“出队”。
	//		队列中的元素的添加和删除操作具有“先进先出”（FIFO）的特性。
	//	9.2.2 直接访问集合（数组类）
	//		1. 浅拷贝与深拷贝
	//		2. 与人不同的运算符
	//		3. 指针转换运算符的作用
	//	9.2.3 顺序访问集合（链表类）

	cout << "===>Ch04<===" << endl;

	src0901(); cout << endl;
	src0902(); cout << endl;
	src0903(); cout << endl;
}
